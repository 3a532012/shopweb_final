<?php

namespace Tests\Unit;

use App\Cart;
use App\Shopweb_final\Cart\Repositories\CartRepositories;
use App\Shopweb_final\Cart\Service\CartService;
use App\Shopweb_final\Goods\Repositories\GoodsRepositories;
use App\Shopweb_final\Order\Repositories\OrderRepositories;
use App\Shopweb_final\User\Repositories\UserRepositories;
use Tests\TestCase;
use Illuminate\Support\Facades\DB;

class CartServiceTest extends TestCase
{
    /**
     * A basic unit test example.
     *
     * @return void
     */

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->UserRepositories = new UserRepositories();
        $this->OrderRepositories = new OrderRepositories();
        $this->GoodsRepositories = new GoodsRepositories();
        $this->CartRepositories = new CartRepositories($this->UserRepositories);

        $this->cartService = new CartService($this->GoodsRepositories,
            $this->CartRepositories,
            $this->UserRepositories,
            $this->OrderRepositories);
        $this->loginWithFakeUser();
        $this->initDatabase();
    }


    public function testAddGoodsInCart()
    {

        $input = ['size' => 'x', 'quantity' => '87', 'user_id' => '49'];
        $actutal = $this->cartService->addGoodsInCart($input, 3);
        $makeResultIsTure = Cart::where(['size' => 'x', 'quantity' => '87', 'user_id' => '49',])->exists();
        $this->assertSame(TRUE, $actutal);
        $this->assertSame(TRUE, $makeResultIsTure);


    }

    public function testGetGoodsInCart()
    {
        $this->testAddGoodsInCart();
        $expect = DB::table('carts')->where('user_id', 49)->paginate(5);
        $returnResult = $this->cartService->getGoodsInCart();
        $this->assertEquals($expect, $returnResult);
        $this->initDatabase();


    }

    public function testDeleteGoodsInCart()
    {

        $this->testAddGoodsInCart();
        $deleteTargetId = DB::table('carts')->where('user_id', 49)->first();
        $this->cartService->deleteGoodsInCart($deleteTargetId->id);
        $actual = DB::table('carts')->where('id', $deleteTargetId->id)->exists();
        $this->assertEquals(false, $actual);
        $this->initDatabase();


    }
}
