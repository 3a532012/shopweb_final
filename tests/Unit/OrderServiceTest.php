<?php

namespace Tests\Unit;

use App\Shopweb_final\Cart\Repositories\CartRepositories;
use App\Shopweb_final\Order\Repositories\OrderRepositories;
use App\Shopweb_final\Order\Service\OrderService;
use App\Shopweb_final\User\Repositories\UserRepositories;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class OrderServiceTest extends TestCase
{
    /**
     * A basic unit test example.
     *
     * @return void
     */

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->OrderRepositories = new OrderRepositories();
        $this->UserRepositories = new UserRepositories();
        $this->CartRepositories = new CartRepositories($this->UserRepositories);
        $this->orderService = new OrderService($this->OrderRepositories,
            $this->CartRepositories,
            $this->UserRepositories);
        $this->loginWithFakeUser();
    }

    public function testCreatOrder()
        //執行該方法前要先執行testCartService->testCartServiceAddGoodsInCart讓DB有東西
    {

        $number = 0;
        $expect = DB::table('carts')->where('user_id', 87)->get();
        foreach ($expect as $abc) {
            $number = $number + $abc->price * $abc->quantity;//計算購物車總金額
        }
        $this->orderService->creatOrder();
        $actual = DB::table('orders')->where('user_id', 87)->first();
        $this->assertEquals($number, $actual->total);


    }


}
